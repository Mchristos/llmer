"""Fill in a module description here"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['APIKEY_STRS', 'DEFAULT_MODELS', 'show', 'LLMer']

# %% ../nbs/00_core.ipynb 3
import os
from google import genai
from dotenv import load_dotenv
from IPython.display import display, Markdown

APIKEY_STRS = {'gemini': 'GEMINI_API_KEY'}
DEFAULT_MODELS = {'gemini': 'gemini-2.5-flash'}

def show(response):
    return display(Markdown(response.text))
    
class LLMer: 
    def __init__(self, provider: str, model=None, fmt_response=True):
        self.provider = provider.lower()
        self.model = model
        self.fmt_response = fmt_response
    
        load_dotenv()
        apikey_str = APIKEY_STRS.get(self.provider)
        if self.provider == "gemini":
            # 1. Set API Key
            api_key = os.getenv(apikey_str)
            if not api_key:
                raise ValueError(f"No API key found: {apikey_str}")
            print(f"found GEMINI_API_KEY: {'...' + api_key[-4:] if api_key else 'N/A'}")
            # 2. Set model / default model
            if self.model is None:
                self.model = DEFAULT_MODELS[self.provider]
            # 3. Set chat
            self.client = genai.Client()
            self.chat = self.client.chats.create(model=self.model)
        else:
            raise ValueError(f"Provider {self.provider} not supported")
            
        print(f"LLMer initialized for '{self.provider}'.")

    def ask(self, prompt: str, fmt_response: bool = True) -> str:
        if self.provider == "gemini":
            r = self.chat.send_message(prompt)
        elif self.provider == "openai":
            pass
        else:
            raise ValueError(f"Provider '{self.provider}' not supported.")
        if fmt_response:
            show(r)
        else:
            return r
